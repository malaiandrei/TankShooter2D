{"version":3,"sources":["serviceWorker.ts","shared/RequestType.ts","game-view/scenes/boot-scene.ts","game-view/objects/bullet.ts","game-view/objects/player.ts","game-view/objects/enemy.ts","game-view/objects/obstacles/obstacle.ts","game-view/scenes/game-scene.ts","game-view/scenes/menu-scene.ts","game-view/GameView.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","RequestType","BootScene","key","loadingBar","progressBar","this","cameras","main","setBackgroundColor","createLoadingGraphics","load","on","value","clear","fillStyle","fillRect","width","height","destroy","levelMap","levelMap1","tilemapTiledJSON","image","scene","start","add","graphics","Phaser","Scene","Bullet","params","x","y","bulletSpeed","source","rotation","initImage","existing","setOrigin","setDepth","physics","world","enable","body","velocityFromRotation","Math","PI","velocity","GameObjects","Image","Player","frame","health","lastShoot","speed","username","ioClient","barrel","usernameView","lifeBar","bullets","cursors","rotateKeyLeft","rotateKeyRight","shootingKey","angle","text","fontFamily","setFontSize","redrawLifebar","group","active","maxSize","runChildUpdate","input","keyboard","createCursorKeys","addKey","Input","Keyboard","KeyCodes","A","D","SPACE","UPDATEHEAL","data","updateHealthByValue","ADDBULLET","tempKey","handleInput","handleShooting","children","entries","forEach","child","up","isDown","updatePosition","down","setVelocity","left","updateRotation","right","emit","CHANGEROTATION","rotationTank","rotationTun","CHANGEPOSITION","time","now","shake","tweens","targets","props","alpha","delay","duration","ease","easeParams","undefined","hold","repeat","repeatDelay","yoyo","paused","lineStyle","strokeRect","updateAll","KILLPLAYER","Enemy","initContainer","Obstacle","setImmovable","GameScene","map","tileset","layer","textConnPlayers","player","enemies","obstacles","target","getRandomInt","connectedPlayers","make","tilemap","addTilesetImage","createStaticLayer","setCollisionByProperty","collide","convertObjects","connectToSocket","collider","getBullets","bulletHitLayer","bulletHitObstacles","each","enemy","overlap","playerBulletHitEnemy","enemyBulletHitPlayer","startFollow","update","getObjectLayer","objects","object","obstacle","type","bullet","updateHealth","alert","max","floor","random","require","connect","SETUSERNAME","USERNAMEEXIST","existUsername","GETCONNECTEDPLAYERS","playerNb","setText","createPlayer","GETPLAYERS","SENDPLAYERS","elem","createAfterGetData","SENDROTATION","iterate","getBarrel","RAD_TO_DEG","colliders","events","remove","DISCONNECT","disconnectEnemy","SENDPOSITION","MenuScene","startKey","S","sys","canvas","get","GameView","state","life","configPhaser","Game","parent","AUTO","zoom","default","arcade","gravity","debug","backgroundColor","render","pixelArt","antialias","id","React","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.210331b8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export enum RequestType {\n  CONNECT,\n  DISCONNECT,\n  GETCONNECTEDPLAYERS,\n  SETUSERNAME,\n  USERNAMEEXIST,\n  GETPLAYERS,\n  SENDPLAYERS,\n  CHANGEPOSITION,\n  CHANGEROTATION,\n  SENDPOSITION,\n  SENDROTATION,\n  KILLPLAYER,\n  ADDBULLET,\n  UPDATEHEAL\n}\n","import levelMap1 from \"../assets/maps/levelMap.json\";\n\nexport class BootScene extends Phaser.Scene {\n  private loadingBar!: Phaser.GameObjects.Graphics;\n  private progressBar!: Phaser.GameObjects.Graphics;\n\n  constructor() {\n    super({\n      key: \"BootScene\",\n    });\n  }\n\n  preload(): void {\n    this.cameras.main.setBackgroundColor(0x000000);\n    this.createLoadingGraphics();\n\n    this.load.on(\n      \"progress\",\n      (value: any) => {\n        this.progressBar.clear();\n        this.progressBar.fillStyle(0x88e453, 1);\n        this.progressBar.fillRect(\n          this.cameras.main.width / 4,\n          this.cameras.main.height / 2 - 16,\n          (this.cameras.main.width / 2) * value,\n          16\n        );\n      },\n      this\n    );\n\n    this.load.on(\n      \"complete\",\n      () => {\n        this.progressBar.destroy();\n        this.loadingBar.destroy();\n      },\n      this\n    );\n\n    const levelMap: any = levelMap1;\n    this.load.tilemapTiledJSON(\"levelMap\", levelMap);\n\n    const tankBlue = \"../assets/sprites/tank-blue.png\";\n    const tankRed = \"../assets/sprites/tank-red.png\";\n    const barrelBlue = \"../assets/sprites/barrel-blue.png\";\n    const barrelRed = \"../assets/sprites/barrel-red.png\";\n    const bulletBlue = \"../assets/sprites/bullet-blue.png\";\n    const bulletRed = \"../assets/sprites/bullet-red.png\";\n    const tiles = \"../assets/tiles/tiles.png\";\n    const barrelGreyTop = \"../assets/obstacles/barrel-grey-top.png\";\n    const barrelGreySideRust = \"../assets/obstacles/barrel-grey-side-rust.png\";\n    const barrelGreySide = \"../assets/obstacles/barrel-grey-side.png\";\n    const barrelRedTop = \"../assets/obstacles/barrel-red-top.png\";\n    const barrelRedSide = \"../assets/obstacles/barrel-red-side.png\";\n    const treeSmall = \"../assets/obstacles/tree-small.png\";\n    const treeLarge = \"../assets/obstacles/tree-large.png\";\n\n    this.load.image(\"tankBlue\", tankBlue);\n    this.load.image(\"tankRed\", tankRed);\n    this.load.image(\"barrelBlue\", barrelBlue);\n    this.load.image(\"barrelRed\", barrelRed);\n    this.load.image(\"bulletBlue\", bulletBlue);\n    this.load.image(\"tiles\", tiles);\n    this.load.image(\"barrelGreyTop\", barrelGreyTop);\n    this.load.image(\"bulletRed\", bulletRed);\n    this.load.image(\"barrelGreySideRust\", barrelGreySideRust);\n    this.load.image(\"barrelGreySide\", barrelGreySide);\n    this.load.image(\"treeSmall\", treeSmall);\n    this.load.image(\"barrelRedSide\", barrelRedSide);\n    this.load.image(\"treeLarge\", treeLarge);\n    this.load.image(\"barrelRedTop\", barrelRedTop);\n  }\n\n  update(): void {\n    this.scene.start(\"MenuScene\");\n  }\n\n  private createLoadingGraphics(): void {\n    this.loadingBar = this.add.graphics();\n    this.loadingBar.fillStyle(0xffffff, 1);\n    this.loadingBar.fillRect(\n      this.cameras.main.width / 4 - 2,\n      this.cameras.main.height / 2 - 18,\n      this.cameras.main.width / 2 + 4,\n      20\n    );\n    this.progressBar = this.add.graphics();\n  }\n}\n","export class Bullet extends Phaser.GameObjects.Image {\n  private bulletSpeed!: number;\n  public source!: string;\n  constructor(params: any) {\n    super(params.scene, params.x, params.y, params.key);\n    this.source = params.source;\n    this.rotation = params.rotation;\n    this.initImage();\n    this.scene.add.existing(this);\n  }\n\n  private initImage(): void {\n    this.bulletSpeed = 1000;\n\n    this.setOrigin(0.5, 0.5);\n    this.setDepth(2);\n\n    this.scene.physics.world.enable(this);\n    const body: Phaser.Physics.Arcade.Body = this\n      .body as Phaser.Physics.Arcade.Body;\n    this.scene.physics.velocityFromRotation(\n      this.rotation - Math.PI / 2,\n      this.bulletSpeed,\n      body.velocity\n    );\n  }\n\n  update(): void {}\n}\n","import { Bullet } from \"./bullet\";\nimport { RequestType } from \"../../shared/RequestType\";\n\nexport class Player extends Phaser.GameObjects.Image {\n  private health!: number;\n  private lastShoot!: number;\n  private speed!: number;\n  public username!: string;\n  public ioClient!: any;\n  private barrel!: Phaser.GameObjects.Image;\n  private usernameView!: Phaser.GameObjects.Text;\n  private lifeBar!: Phaser.GameObjects.Graphics;\n\n  private bullets!: Phaser.GameObjects.Group;\n\n  private cursors!: Phaser.Types.Input.Keyboard.CursorKeys;\n  private rotateKeyLeft!: Phaser.Input.Keyboard.Key;\n  private rotateKeyRight!: Phaser.Input.Keyboard.Key;\n  private shootingKey!: Phaser.Input.Keyboard.Key;\n\n  public getBullets(): Phaser.GameObjects.Group {\n    return this.bullets;\n  }\n\n  constructor(params: any) {\n    super(params.scene, params.x, params.y, params.key, params.frame);\n    this.username = params.username;\n    this.ioClient = params.ioClient;\n    this.initImage();\n\n    this.scene.add.existing(this);\n  }\n\n  private initImage() {\n    this.health = 1;\n    this.lastShoot = 0;\n    this.speed = 100;\n\n    this.setOrigin(0.5, 0.5);\n    this.setDepth(0);\n    this.angle = 0;\n\n    this.barrel = this.scene.add.image(this.x, this.y, \"barrelBlue\");\n    this.barrel.setOrigin(0.5, 1);\n    this.barrel.setDepth(1);\n    this.usernameView = this.scene.add\n      .text(0, 0, this.username, {\n        fontFamily: '\"Roboto Condensed\"',\n      })\n      .setFontSize(25);\n    this.usernameView.setOrigin(0.5, -1.8);\n    this.usernameView.setDepth(1);\n\n    this.lifeBar = this.scene.add.graphics();\n    this.redrawLifebar();\n\n    this.bullets = this.scene.add.group({\n      active: true,\n      maxSize: 10,\n      runChildUpdate: true,\n    });\n\n    this.cursors = this.scene.input.keyboard.createCursorKeys();\n    this.rotateKeyLeft = this.scene.input.keyboard.addKey(\n      Phaser.Input.Keyboard.KeyCodes.A\n    );\n    this.rotateKeyRight = this.scene.input.keyboard.addKey(\n      Phaser.Input.Keyboard.KeyCodes.D\n    );\n    this.shootingKey = this.scene.input.keyboard.addKey(\n      Phaser.Input.Keyboard.KeyCodes.SPACE\n    );\n\n    this.scene.physics.world.enable(this);\n    this.ioClient.on(RequestType.UPDATEHEAL, (data: any) => {\n      if (data.username === this.username) {\n        this.updateHealthByValue(data.health, false);\n      }\n    });\n    this.ioClient.on(RequestType.ADDBULLET, (data: any) => {\n      const tempKey =\n        this.username === data.username ? \"bulletBlue\" : \"bulletRed\";\n      this.bullets.add(\n        new Bullet({\n          scene: this.scene,\n          x: data.x,\n          y: data.y,\n          key: tempKey,\n          rotation: data.rotation,\n          source: data.username,\n        })\n      );\n    });\n  }\n\n  update(): void {\n    if (this.active) {\n      this.barrel.x = this.x;\n      this.barrel.y = this.y;\n      this.lifeBar.x = this.x;\n      this.lifeBar.y = this.y;\n      this.usernameView.x = this.x;\n      this.usernameView.y = this.y;\n      this.handleInput();\n      this.handleShooting();\n    } else {\n      this.barrel.destroy();\n      this.usernameView.destroy();\n      this.lifeBar.destroy();\n      this.bullets.children.entries.forEach((child) => {\n        child.destroy();\n      });\n      this.bullets.clear();\n      this.bullets.clear(true);\n      this.destroy();\n    }\n  }\n\n  private handleInput() {\n    const body: Phaser.Physics.Arcade.Body = this\n      .body as Phaser.Physics.Arcade.Body;\n    if (this.cursors.up && this.cursors.up.isDown) {\n      this.scene.physics.velocityFromRotation(\n        this.rotation - Math.PI / 2,\n        this.speed,\n        body.velocity\n      );\n      this.updatePosition();\n    } else if (this.cursors.down && this.cursors.down.isDown) {\n      this.scene.physics.velocityFromRotation(\n        this.rotation - Math.PI / 2,\n        -this.speed,\n        body.velocity\n      );\n      this.updatePosition();\n    } else {\n      body.setVelocity(0, 0);\n    }\n\n    if (this.cursors.left && this.cursors.left.isDown) {\n      this.rotation -= 0.02;\n      this.updateRotation();\n    } else if (this.cursors.right && this.cursors.right.isDown) {\n      this.rotation += 0.02;\n      this.updateRotation();\n    }\n\n    if (this.rotateKeyLeft.isDown) {\n      this.barrel.rotation -= 0.05;\n      this.updateRotation();\n    } else if (this.rotateKeyRight.isDown) {\n      this.barrel.rotation += 0.05;\n      this.updateRotation();\n    }\n  }\n  private updateRotation() {\n    this.ioClient.emit(RequestType.CHANGEROTATION, {\n      rotationTank: this.rotation,\n      rotationTun: this.barrel.rotation,\n      username: this.username,\n    });\n  }\n  private updatePosition() {\n    this.ioClient.emit(RequestType.CHANGEPOSITION, {\n      x: this.x,\n      y: this.y,\n      username: this.username,\n    });\n  }\n  private handleShooting(): void {\n    if (this.shootingKey.isDown && this.scene.time.now > this.lastShoot) {\n      this.scene.cameras.main.shake(20, 0.005);\n      this.scene.tweens.add({\n        targets: this,\n        props: { alpha: 0.8 },\n        delay: 0,\n        duration: 5,\n        ease: \"Power1\",\n        easeParams: undefined,\n        hold: 0,\n        repeat: 0,\n        repeatDelay: 0,\n        yoyo: true,\n        paused: false,\n      });\n\n      this.ioClient.emit(RequestType.ADDBULLET, {\n        x: this.barrel.x,\n        y: this.barrel.y,\n        rotation: this.barrel.rotation,\n        username: this.username,\n      });\n\n      this.lastShoot = this.scene.time.now + 200;\n    }\n  }\n\n  private redrawLifebar(): void {\n    this.lifeBar.clear();\n    this.lifeBar.fillStyle(0xe66a28, 1);\n    this.lifeBar.fillRect(\n      -this.width / 2,\n      this.height / 2,\n      this.width * this.health,\n      15\n    );\n    this.lifeBar.lineStyle(2, 0xffffff);\n    this.lifeBar.strokeRect(-this.width / 2, this.height / 2, this.width, 15);\n    this.lifeBar.setDepth(1);\n  }\n\n  public updateHealth(): void {\n    this.updateHealthByValue(this.health - 0.05, true);\n  }\n\n  private updateHealthByValue(health: number, updateAll: boolean) {\n    if (this.health > 0) {\n      this.health = health;\n      this.redrawLifebar();\n      if (updateAll)\n        this.ioClient.emit(RequestType.UPDATEHEAL, {\n          health: this.health,\n          username: this.username,\n        });\n    } else {\n      this.health = 0;\n      this.active = false;\n      this.ioClient.emit(RequestType.KILLPLAYER, { username: this.username });\n    }\n  }\n}\n","import { RequestType } from \"../../shared/RequestType\";\n\nexport class Enemy extends Phaser.GameObjects.Image {\n  private health!: number;\n  public username!: string;\n  public ioClient!: any;\n\n  private barrel!: Phaser.GameObjects.Image;\n  private usernameView!: Phaser.GameObjects.Text;\n  private lifeBar!: Phaser.GameObjects.Graphics;\n\n  private bullets!: Phaser.GameObjects.Group;\n\n  public getBarrel(): Phaser.GameObjects.Image {\n    return this.barrel;\n  }\n\n  public getBullets(): Phaser.GameObjects.Group {\n    return this.bullets;\n  }\n\n  constructor(params: any) {\n    super(params.scene, params.x, params.y, params.key, params.frame);\n    this.username = params.username;\n    this.ioClient = params.ioClient;\n    this.initContainer();\n    this.scene.add.existing(this);\n  }\n\n  private initContainer() {\n    this.health = 1;\n    this.setDepth(0);\n\n    this.barrel = this.scene.add.image(0, 0, \"barrelRed\");\n    this.barrel.setOrigin(0.5, 1);\n    this.barrel.setDepth(1);\n\n    this.usernameView = this.scene.add\n      .text(0, 0, this.username, {\n        fontFamily: '\"Roboto Condensed\"',\n      })\n      .setFontSize(25);\n    this.usernameView.setOrigin(0.5, -1.8);\n    this.usernameView.setDepth(1);\n    this.lifeBar = this.scene.add.graphics();\n    this.redrawLifebar();\n\n    this.bullets = this.scene.add.group({\n      active: true,\n      maxSize: 10,\n      runChildUpdate: true,\n    });\n    this.scene.physics.world.enable(this);\n    this.ioClient.on(RequestType.UPDATEHEAL, (data: any) => {\n      if (data.username === this.username) {\n        this.updateHealthByValue(data.health, false);\n      }\n    });\n  }\n\n  update(): void {\n    if (this.active) {\n      this.barrel.x = this.x;\n      this.barrel.y = this.y;\n      this.lifeBar.x = this.x;\n      this.lifeBar.y = this.y;\n      this.usernameView.x = this.x;\n      this.usernameView.y = this.y;\n    } else {\n      this.barrel.destroy();\n      this.lifeBar.destroy();\n      this.usernameView.destroy();\n      this.destroy();\n    }\n  }\n\n  private redrawLifebar(): void {\n    this.lifeBar.clear();\n    this.lifeBar.fillStyle(0xe66a28, 1);\n    this.lifeBar.fillRect(\n      -this.width / 2,\n      this.height / 2,\n      this.width * this.health,\n      15\n    );\n    this.lifeBar.lineStyle(2, 0xffffff);\n    this.lifeBar.strokeRect(-this.width / 2, this.height / 2, this.width, 15);\n    this.lifeBar.setDepth(1);\n  }\n\n  public updateHealth(): void {\n    this.updateHealthByValue(this.health - 0.05, true);\n  }\n  private updateHealthByValue(health: number, updateAll: boolean) {\n    if (this.health > 0) {\n      this.health = health;\n      this.redrawLifebar();\n      if (updateAll) {\n        this.ioClient.emit(RequestType.UPDATEHEAL, {\n          health: this.health,\n          username: this.username,\n        });\n      }\n    } else {\n      this.health = 0;\n      this.ioClient.emit(RequestType.KILLPLAYER, { username: this.username });\n      this.active = false;\n    }\n  }\n}\n","export class Obstacle extends Phaser.GameObjects.Image {\n  constructor(params: any) {\n    super(params.scene, params.x, params.y, params.key);\n\n    this.initImage();\n    this.scene.add.existing(this);\n  }\n\n  private initImage(): void {\n    this.setOrigin(0, 0);\n    this.scene.physics.world.enable(this);\n    const body: Phaser.Physics.Arcade.Body = this\n      .body as Phaser.Physics.Arcade.Body;\n    body.setImmovable(true);\n  }\n\n  update(): void {}\n}\n","import { Player } from \"../objects/player\";\nimport { Enemy } from \"../objects/enemy\";\nimport { Obstacle } from \"../objects/obstacles/obstacle\";\nimport { RequestType } from \"../../shared/RequestType\";\n\nexport class GameScene extends Phaser.Scene {\n  private map!: Phaser.Tilemaps.Tilemap;\n  private tileset!: Phaser.Tilemaps.Tileset;\n  private layer!: Phaser.Tilemaps.StaticTilemapLayer;\n  private textConnPlayers!: Phaser.GameObjects.Text;\n\n  private player!: Player;\n  private enemies!: Phaser.GameObjects.Group;\n  private obstacles!: Phaser.GameObjects.Group;\n\n  private target!: Phaser.Math.Vector2;\n\n  constructor() {\n    super({\n      key: \"GameScene\",\n    });\n  }\n\n  init(): void {}\n\n  create() {\n    this.map = this.make.tilemap({ key: \"levelMap\" });\n    this.tileset = this.map.addTilesetImage(\"tiles\");\n    this.layer = this.map.createStaticLayer(\"tileLayer\", this.tileset, 0, 0);\n    this.layer.setCollisionByProperty({ collide: true });\n    this.obstacles = this.add.group({\n      runChildUpdate: true,\n    });\n    this.enemies = this.add.group({});\n\n    this.textConnPlayers = this.add\n      .text(0, 0, \"\", {\n        fontFamily: \"Roboto Condensed\",\n      })\n      .setFontSize(40);\n    this.convertObjects();\n    this.connectToSocket();\n  }\n\n  private createAfterGetData() {\n    this.physics.add.collider(this.player, this.layer);\n    this.physics.add.collider(this.player, this.obstacles);\n\n    this.physics.add.collider(\n      this.player.getBullets(),\n      this.layer,\n      this.bulletHitLayer,\n      undefined,\n      this\n    );\n\n    this.physics.add.collider(\n      this.player.getBullets(),\n      this.obstacles,\n      this.bulletHitObstacles,\n      undefined,\n      this\n    );\n    this.enemies.children.each((enemy: any) => {\n      this.physics.add.overlap(\n        this.player.getBullets(),\n        this.player,\n        this.playerBulletHitEnemy,\n        undefined,\n        this\n      );\n      this.physics.add.overlap(\n        this.player.getBullets(),\n        enemy,\n        this.playerBulletHitEnemy,\n        undefined,\n        this\n      );\n      this.physics.add.overlap(\n        enemy.getBullets(),\n        this.player,\n        this.enemyBulletHitPlayer,\n        undefined\n      );\n\n      this.physics.add.collider(\n        enemy.getBullets(),\n        this.obstacles,\n        this.bulletHitObstacles,\n        undefined\n      );\n      this.physics.add.collider(\n        enemy.getBullets(),\n        this.layer,\n        this.bulletHitLayer,\n        undefined\n      );\n    }, this);\n    this.cameras.main.startFollow(this.player);\n  }\n\n  update(): void {\n    if (this.player) {\n      this.player.update();\n    }\n    if (this.enemies) {\n      this.enemies.children.each((enemy: any) => {\n        enemy.update();\n      }, this);\n    }\n    if (this.textConnPlayers && this.player) {\n      this.textConnPlayers.x = this.player.x;\n      this.textConnPlayers.y = this.player.y;\n      this.textConnPlayers.setOrigin(1.9, 13);\n      this.textConnPlayers.setDepth(1);\n    }\n  }\n\n  private convertObjects(): void {\n    const objects = this.map.getObjectLayer(\"objects\").objects as any[];\n    objects.forEach((object) => {\n      let obstacle = new Obstacle({\n        scene: this,\n        x: object.x,\n        y: object.y - 40,\n        key: object.type,\n      });\n      this.obstacles.add(obstacle);\n    });\n  }\n\n  private bulletHitLayer(bullet: any): void {\n    bullet.destroy();\n  }\n\n  private bulletHitObstacles(bullet: any, obstacle: any): void {\n    bullet.destroy();\n  }\n\n  private enemyBulletHitPlayer(bullet: any, player: any): void {\n    if (player.username !== bullet.source) {\n      bullet.destroy();\n      player.updateHealth();\n    }\n  }\n\n  private playerBulletHitEnemy(bullet: any, enemy: any): void {\n    if (enemy.username !== bullet.source) {\n      bullet.destroy();\n      enemy.updateHealth();\n    }\n  }\n\n  private existUsername() {\n    alert(\"this name exist!\");\n  }\n\n  private getRandomInt(max: number) {\n    return Math.floor(Math.random() * Math.floor(max));\n  }\n  username: string = \"guest\" + this.getRandomInt(10000);\n  connectedPlayers: number = 0;\n  private connectToSocket() {\n    const io = require(\"socket.io-client\"),\n      ioClient = io.connect(\"http://localhost:8000\");\n    const x = this.getRandomInt(1600);\n    const y = this.getRandomInt(1200);\n    ioClient.emit(RequestType.SETUSERNAME, {\n      username: this.username,\n      x: x,\n      y: y,\n    });\n    ioClient.on(RequestType.USERNAMEEXIST, () => this.existUsername());\n\n    ioClient.on(RequestType.GETCONNECTEDPLAYERS, (playerNb: number) => {\n      this.connectedPlayers = playerNb;\n      this.textConnPlayers.setText(\n        \"Connected players:\" + this.connectedPlayers\n      );\n    });\n    this.createPlayer(ioClient);\n  }\n\n  private createPlayer(ioClient: any) {\n    ioClient.emit(RequestType.GETPLAYERS);\n\n    ioClient.on(RequestType.SENDPLAYERS, (data: any[]) => {\n      this.enemies = this.add.group({});\n      data.forEach((elem) => {\n        if (elem.username === this.username) {\n          if (this.player) {\n            this.player.x = elem.x;\n            this.player.y = elem.y;\n          } else {\n            this.player = new Player({\n              ioClient: ioClient,\n              scene: this,\n              x: elem.x,\n              y: elem.y,\n              key: \"tankBlue\",\n              username: elem.username,\n            });\n          }\n        } else {\n          let enemy = new Enemy({\n            scene: this,\n            x: elem.x,\n            y: elem.y,\n            key: \"tankRed\",\n            username: elem.username,\n            ioClient: ioClient,\n          });\n          this.enemies.add(enemy);\n        }\n      });\n      this.createAfterGetData();\n    });\n\n    ioClient.on(RequestType.SENDROTATION, (data: any) => {\n      const rotationTank = data.rotationTank;\n      const rotationTun = data.rotationTun;\n      const username = data.username;\n      if (this.enemies) {\n        this.enemies.children.iterate((enemy: any) => {\n          if (enemy.username === username) {\n            enemy.getBarrel().angle = rotationTun * Phaser.Math.RAD_TO_DEG;\n            enemy.angle = rotationTank * Phaser.Math.RAD_TO_DEG;\n          }\n        });\n      }\n    });\n\n    ioClient.on(RequestType.KILLPLAYER, (data: any) => {\n      const username = data.username;\n      if (this.player.username === username) {\n        this.physics.world.colliders.destroy();\n        this.events.destroy();\n        this.player.active = false;\n        this.scene.remove(\"GameScene\");\n        this.scene.start(\"MenuScene\");\n      }\n    });\n\n    ioClient.on(RequestType.DISCONNECT, (data: any) => {\n      const username = data.username;\n      this.disconnectEnemy(username);\n    });\n\n    ioClient.on(RequestType.SENDPOSITION, (data: any) => {\n      const x = data.x;\n      const y = data.y;\n      const username = data.username;\n      if (this.enemies) {\n        this.enemies.children.iterate((enemy: any) => {\n          if (enemy.username === username) {\n            enemy.x = x;\n            enemy.y = y;\n          }\n        });\n      }\n    });\n  }\n\n  disconnectEnemy(username: string) {\n    if (this.enemies) {\n      this.enemies.children.iterate((enemy: any) => {\n        if (enemy.username === username) {\n          enemy.active = false;\n        }\n      });\n    }\n  }\n}\n","import { GameScene } from \"./game-scene\";\n\nexport class MenuScene extends Phaser.Scene {\n  private startKey!: Phaser.Input.Keyboard.Key;\n  constructor() {\n    super({\n      key: \"MenuScene\",\n    });\n  }\n\n  init(): void {\n    this.startKey = this.input.keyboard.addKey(\n      Phaser.Input.Keyboard.KeyCodes.S\n    );\n    this.startKey.isDown = false;\n  }\n\n  create(): void {\n    this.add\n      .text(\n        this.sys.canvas.width / 2 - 120,\n        this.sys.canvas.height / 2,\n        \"PRESS S TO PLAY\",\n        { fontFamily: '\"Roboto Condensed\"' }\n      )\n      .setFontSize(30);\n    this.add\n      .text(\n        this.sys.canvas.width / 2 - 120,\n        this.sys.canvas.height / 2 - 100,\n        \"TANK\",\n        { fontFamily: '\"Roboto Condensed\"' }\n      )\n      .setFontSize(100);\n  }\n\n  update(): void {\n    if (this.startKey.isDown) {\n      if (!this.scene.get(\"GameScene\"))\n        this.scene.add(\"GameScene\", GameScene, true);\n    }\n  }\n}\n","import * as React from \"react\";\nimport \"./GameStyle.css\";\nimport Phaser from \"phaser\";\n\nimport { BootScene } from \"./scenes/boot-scene\";\nimport { MenuScene } from \"./scenes/menu-scene\";\n\ninterface IStateGameView {\n  life: number;\n  playerNb: number;\n}\n\nexport default class GameView extends React.Component<any, IStateGameView> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      playerNb: 0,\n      life: 0,\n    };\n  }\n\n  componentDidMount() {\n    this.configPhaser();\n  }\n\n  private configPhaser() {\n    new Phaser.Game({\n      parent: \"game-root\",\n      type: Phaser.AUTO,\n      width: 1600,\n      height: 1200,\n      zoom: 0.6,\n      scene: [BootScene, MenuScene],\n      input: {\n        keyboard: true,\n      },\n      physics: {\n        default: \"arcade\",\n        arcade: {\n          gravity: { y: 0 },\n          debug: false,\n        },\n      },\n      backgroundColor: \"#000000\",\n      render: { pixelArt: false, antialias: true },\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div id=\"game-root\"></div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport GameView from \"./game-view/GameView\";\n\nReactDOM.render(<GameView />, document.getElementById(\"root\"));\nserviceWorker.unregister();\n"],"sourceRoot":""}